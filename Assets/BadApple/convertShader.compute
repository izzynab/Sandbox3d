// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSSobel
#pragma kernel CSThreshold
#pragma kernel CSGreyscale

Texture2D<float4> ClipTexture;
SamplerState sampler_ClipTexture;

RWStructuredBuffer<int2> ActivePositions;
RWStructuredBuffer<uint> NumberOfActivePixels;

float ParticleThreshold;
float Resolution;
int resolutionOfParticles;
float randomizeParticleMultipler;
bool Invert;
int clipWidth;

float rand(float2 co){
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}


[numthreads(1, 1, 1)]
void CSSobel(uint3 id : SV_DispatchThreadID)
{
	ClipTexture.SampleLevel(sampler_ClipTexture, id.xy,0);
    float4 n[9];

	float2 coord = id.xy*resolutionOfParticles;
	float w = 1.0;
	float h = 1.0;

	n[0] = ClipTexture[(coord + float2( -w, -h))];
	n[1] = ClipTexture[coord + float2(0.0, -h)];
	n[2] = ClipTexture[coord + float2(  w, -h)];
	n[3] = ClipTexture[coord + float2( -w, 0.0)];
	n[4] = ClipTexture[coord];
	n[5] = ClipTexture[coord + float2(  w, 0.0)];
	n[6] = ClipTexture[coord + float2( -w, h)];
	n[7] = ClipTexture[coord + float2(0.0, h)];
	n[8] = ClipTexture[coord + float2(  w, h)];

	float4 sobel_edge_h = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);
  	float4 sobel_edge_v = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);
	float4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));

	float4 outcol = float4( 1.0 - sobel.rgb, 1.0 );  

    if(Invert)
	{
		 if(outcol.r > ParticleThreshold)
		 {
			uint count = NumberOfActivePixels.IncrementCounter();
			ActivePositions[count] = float2(rand(id.xy),rand(id.xy))*randomizeParticleMultipler*Resolution + id.xy*resolutionOfParticles*Resolution;      
		 }
	}
	else
	{
	 if(outcol.r < ParticleThreshold)
		 {
			uint count = NumberOfActivePixels.IncrementCounter();
			ActivePositions[count] = float2(rand(id.xy),rand(id.xy))*randomizeParticleMultipler*Resolution + id.xy*resolutionOfParticles*Resolution;      
		 }
	}
}



[numthreads(1, 1, 1)]
void CSThreshold(uint3 id : SV_DispatchThreadID)
{
	ClipTexture.SampleLevel(sampler_ClipTexture, id.xy,0);   
	float4 outcol = ClipTexture[id.xy*resolutionOfParticles];


    if(Invert)
	{
		 if(outcol.r > 0.9)
		 {			
			uint count = NumberOfActivePixels.IncrementCounter();
			ActivePositions[count] = float2(rand(id.xy),rand(id.xy))*randomizeParticleMultipler*Resolution + id.xy*resolutionOfParticles*Resolution;     
		 }
	}
	else
	{
	 if(outcol.r < ParticleThreshold)
		 {			
			uint count = NumberOfActivePixels.IncrementCounter();
			ActivePositions[count] = float2(rand(id.xy),rand(id.xy))*randomizeParticleMultipler*Resolution + id.xy*resolutionOfParticles*Resolution;          
		 }
	}
}


[numthreads(1, 1, 1)]
void CSGreyscale(uint3 id : SV_DispatchThreadID)
{
	ClipTexture.SampleLevel(sampler_ClipTexture, id.xy,0);   
    float4 col = ClipTexture[id.xy*resolutionOfParticles];

	float grey = (col.r + col.g + col.b)/3.0;
	
	float4 outcol = float4(grey,grey,grey, 1.0 );  

	if(Invert)
	{
		 if(outcol.r > ParticleThreshold)
		 {
			uint count = NumberOfActivePixels.IncrementCounter();
			ActivePositions[count] = float2(rand(id.xy),rand(id.xy))*randomizeParticleMultipler*Resolution + id.xy*resolutionOfParticles*Resolution;     
		 }
	}
	else
	{
	 if(outcol.r < ParticleThreshold)
		 {
			uint count = NumberOfActivePixels.IncrementCounter();
			ActivePositions[count] = float2(rand(id.xy),rand(id.xy))*randomizeParticleMultipler*Resolution + id.xy*resolutionOfParticles*Resolution;      
		 }
	}
   

}


