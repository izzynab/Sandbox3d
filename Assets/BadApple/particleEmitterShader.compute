#pragma kernel CSParticle

 // Particle's data
struct Particle
{
	float3 position;
	float3 velocity;
	float life;
	float3 color;
	float size;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

// Variables set from the CPU
float deltaTime;
float3 direction;
float3 spawnPosition;
float speed;
float lifetime;

float rand(float2 co){
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}

uint rng_state;

uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

//rand from -1 to 1
float rand_xor()
{
	return float(rand_xorshift()) * (1.0 / 4294967296.0) *2 - 1;
}

[numthreads(256, 1, 1)]
void CSParticle(uint3 id : SV_DispatchThreadID)
{
	// subtract the life based on deltaTime
	particleBuffer[id.x].life -= deltaTime;

	//float3 dir = normalize(direction);
	float3 dir = normalize(float3(rand(id.xx)-0.5,rand(id.xx*2)-0.5,rand(id.xx*3)-0.5));

	particleBuffer[id.x].velocity = dir*speed*(rand(id.xx*4)+1);
	particleBuffer[id.x].position += particleBuffer[id.x].velocity*deltaTime;

	if (particleBuffer[id.x].life <= 0)
	{
		// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
		rng_state = id.x;
		float f0 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float f1 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float2 normalF2 = normalize(float2(f0, f1)) * 0.8f;
		normalF2 *= float(rand_xorshift()) * (1.0 / 4294967296.0);

		particleBuffer[id.x].position = float3(spawnPosition.x, spawnPosition.y, spawnPosition.z);
		particleBuffer[id.x].life = lifetime + rand_xor()*lifetime + 1;
		particleBuffer[id.x].velocity = float3(0, 0,0);
		particleBuffer[id.x].color =  float3(0.8, 0,0.5);
		particleBuffer[id.x].size = 1;
	}

}