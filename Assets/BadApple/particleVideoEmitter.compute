// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSActivePixels
#pragma kernel CSGenerate

Texture2D<float4> ResultTexture;
SamplerState sampler_ResultTexture;

RWStructuredBuffer<int2> ActivePositions;
RWStructuredBuffer<int> NumberOfActivePixels;

bool Invert;
float ParticleThreshold;
float ResultTextureWidth;

[numthreads(1, 1, 1)]
void CSActivePixels(uint3 id : SV_DispatchThreadID)
{
	ResultTexture.SampleLevel(sampler_ResultTexture, id.xy,0); 
	float4 col = ResultTexture[id.xy*1];

    if(col.r > ParticleThreshold)
    {
        ActivePositions[NumberOfActivePixels[0]] = id.xy;   
		InterlockedAdd(NumberOfActivePixels[0],1);        
    }
    else 
    {
        //Positions[id.x + id.y * ResultTextureWidth] = float4(0,0,0,0);     
    }

	
}


 // Particle's data
struct Particle
{
	float3 position;
	float3 velocity;
	float life;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> ParticleBuffer;

int CountOfActivePixels;

// Variables set from the CPU
float deltaTime;
//float3 direction;
//float3 spawnPosition;
float speed;
float lifetime;

float rand(float2 co){
    return frac(sin(dot(co, float2(12.9898, 78.233))) * 43758.5453);
}

uint rng_state;

uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

[numthreads(256, 1, 1)]
void CSGenerate(uint3 id : SV_DispatchThreadID)
{
	//float2 spawnPosition = ActivePositions[id.x%CountOfActivePixels];

	// subtract the life based on deltaTime
	ParticleBuffer[id.x].life -= deltaTime;

	//float3 dir = normalize(direction);
	float3 dir = normalize(float3(rand(id.xx)-0.5,rand(id.xx*2)-0.5,rand(id.xx*3)-0.5));

	ParticleBuffer[id.x].velocity = dir*speed*(rand(id.xx*4)+1);
	ParticleBuffer[id.x].position += ParticleBuffer[id.x].velocity*deltaTime;

	if (ParticleBuffer[id.x].life <= 0)
	{
		// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
		rng_state = id.x;
		float f0 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float f1 = float(rand_xorshift()) * (1.0 / 4294967296.0) - 0.5;
		float2 normalF2 = normalize(float2(f0, f1)) * 0.8f;
		normalF2 *= float(rand_xorshift()) * (1.0 / 4294967296.0);

		//ParticleBuffer[id.x].position = float3(spawnPosition.x, 0, spawnPosition.y);
		ParticleBuffer[id.x].life = lifetime;
		ParticleBuffer[id.x].velocity = float3(0, 0,0);
	}

}
